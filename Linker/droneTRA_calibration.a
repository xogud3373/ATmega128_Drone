;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;unsigned int i = 0;
;unsigned int j = 0;
;unsigned int p_count = 0;
;unsigned char msg[10] = {0,};
;unsigned char msg1[10] = {0,};
;
;volatile long int cnt_rising=0;
;volatile long int cnt_falling=0;
;volatile long int pulse_width=0;    // 메모리 변수 선언 (인터럽트에서 쓰이는 변수들)
;
;/*
;// 500us : 921
;// 1500us : 2762
;// 2500us : 4607
;// 1ms : 1843
;// 2ms : 3690
;*/
;
;void Init_USART1_IntCon(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A 
; 0000 001B     // ② RXCIE1=1(수신 인터럽트 허가), RXEN0=1(수신 허가), TXEN0 = 1(송신 허가)
; 0000 001C     UCSR1B = (1<<RXCIE1)| (1<<RXEN1)|(1 <<TXEN1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001D     UBRR1H = 0x00;        // ③ 115200bps 보오 레이트 설정
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E     UBRR1L = 0x07;        // ③ 115200bps 보오 레이트 설정
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001F     SREG  |= 0x80;        // ① 전체 인터럽트 허가
;PCODE: $00000015 VOL: 0
; 0000 0020 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void putch_USART1(char data)            // USART1용 1문자 송신 함수
; 0000 0023 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0024     while(!(UCSR1A & (1<<UDRE1)));
;	data -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0025     UDR1 = data;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0026 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void puts_USART1(char *str)        // USART1용 문자열 송신 함수
; 0000 0029 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002A     while(*str != 0){
;	*str -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002B         putch_USART1(*str);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002C         str++;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002D     }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 002E }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;// 인터럽트 루틴에서의 데이터 수신
;interrupt [USART1_RXC] void usart1_receive(void)    // USART1 RX Complete Handler
; 0000 0032 {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0033     unsigned char buff;
; 0000 0034     buff = UDR1;                                    // UDR1을 buff 버퍼에 저장한다.
;PCODE: $0000003A VOL: 0
;	buff -> R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0035 
; 0000 0036     if(buff == 'p')
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037     {
; 0000 0038         p_count++;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0039         buff = 0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003A     }
; 0000 003B 
; 0000 003C }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;
;
;
;
;void Init_Timer1(void)
; 0000 0043 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0044   // COM1A1 : OC1A핀 출력(PB5) , WGM12~WGM10 : Fast PWM(TOP = ICR1)
; 0000 0045   // COM1B1 : OC1B핀 출력(PB6)
; 0000 0046   // COM1C1 : OC1C핀 출력(PB7)
; 0000 0047   TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11) | (1<<COM1C1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0048   TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);  // 8분주 => 14.7456MHz / 8 = 0.542us = 1.8432MHz
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0049   TIMSK =  (1<<TOIE1); // compare match interrupt set, overflow interrupt (1<< OCIE1A) | (1<< OCIE1B)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004A   //ETIMSK |= (1<< OCIE1C);
; 0000 004B 
; 0000 004C   TCNT1 = 0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004D   ICR1 = 36864;  // TOP값  20000us = 20ms
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004E   //ICR1 = 4608;  // TOP값  2500us = 2.5ms
; 0000 004F 
; 0000 0050   //OCR1A = 1843;
; 0000 0051   //OCR1B = 1843;
; 0000 0052   //OCR1CH = 1843 >> 8;
; 0000 0053   //OCR1CL = 1843 & 0xff;
; 0000 0054 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;void Init_Timer3(void)
; 0000 0057 {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0058     //// COM3A1 : OC3A핀 출력(PE3) , WGM33~WGM30 : Fast PWM(TOP = ICR1)
; 0000 0059     // COM3B1 : OC3B핀 출력(PE4)
; 0000 005A     TCCR3A |= (1<< COM3B1)| (1<<WGM31);  // | (1<< COM3B1) (1<< COM3A1)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005B     TCCR3B |= (1<< WGM33)| (1<< WGM32)|(1<<CS31);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005C     ETIMSK =  (1<< TOIE3); // | (1<< OCIE3B); (1<< OCIE3A)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005D 
; 0000 005E     TCNT3H = 0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005F     TCNT3L = 0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0060 
; 0000 0061     ICR3H = 36864 >> 8;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0062     ICR3L = 36864 & 0xFF;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0063     //ICR3H = 4608 >> 8;
; 0000 0064     //ICR3L = 4608 & 0xFF;
; 0000 0065 
; 0000 0066     //OCR3BH = 1843 >> 8;
; 0000 0067     //OCR3BL = 1843 & 0xff;
; 0000 0068 
; 0000 0069 }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;interrupt [EXT_INT5] void ext_int5_isr(void)
; 0000 006C {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006D       if(PINE.5 == 1)                         // 상승엣지
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006E       {
; 0000 006F              cnt_rising = TCNT1;              // TCNT1 카운터값 read
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 1
; 0000 0070       }
; 0000 0071       else
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0072       {
; 0000 0073              cnt_falling = TCNT1;             // TCNT1 카운터값 read
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
; 0000 0074 
; 0000 0075              pulse_width = (36865- cnt_rising + cnt_falling) % 36865;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 1
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 1
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 1
; 0000 0076       }
;PCODE: $00000083 VOL: 0
; 0000 0077 
; 0000 0078 
; 0000 0079 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;
;void Interrupt_Init(void)
; 0000 007D {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E     EIMSK = 0b00100000;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F     EICRB = 0b00000100;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0080 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;
;interrupt [TIM1_OVF] void tim1_overflow(void)
; 0000 0084 {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0085 }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;
;interrupt [TIM3_OVF] void tim3_overflow(void)
; 0000 0089 {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008A }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;
;
;
;
;void Port_Init(void)
; 0000 0091 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0092     DDRB = 0xFF;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0093     DDRE = 0xDF;   // 0b1101 1111
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0094     PORTE = 0x00;  // 0b0000 0000
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0095     PORTB = 0xFF;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0096 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void main(void)
; 0000 0099 {
;PCODE: $000000A5 VOL: 0
; 0000 009A 
; 0000 009B     Init_USART1_IntCon();
;PCODE: $000000A6 VOL: 0
; 0000 009C     Port_Init();
;PCODE: $000000A7 VOL: 0
; 0000 009D     Init_Timer3();
;PCODE: $000000A8 VOL: 0
; 0000 009E     Init_Timer1();
;PCODE: $000000A9 VOL: 0
; 0000 009F     Interrupt_Init();
;PCODE: $000000AA VOL: 0
; 0000 00A0     while(1)
;PCODE: $000000AB VOL: 0
; 0000 00A1     {
; 0000 00A2         OCR1A = pulse_width;
;PCODE: $000000AC VOL: 1
;PCODE: $000000AD VOL: 0
; 0000 00A3         OCR1B = pulse_width;
;PCODE: $000000AE VOL: 1
;PCODE: $000000AF VOL: 0
; 0000 00A4 
; 0000 00A5         OCR1CH = pulse_width >> 8;
;PCODE: $000000B0 VOL: 1
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00A6         OCR1CL = pulse_width & 0xff;
;PCODE: $000000B4 VOL: 1
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A7 
; 0000 00A8         OCR3BH = pulse_width >> 8;
;PCODE: $000000B7 VOL: 1
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A9         OCR3BL = pulse_width & 0xff;
;PCODE: $000000BB VOL: 1
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00AA 
; 0000 00AB     }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AC }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
